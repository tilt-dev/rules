# Skylark/Windmill built-ins.
# Implemented in Go. Purely here for documentation purposes.

empty_constant = ''
"""Snapshot: An empty file tree"""

def match_glob(pattern):
  """Creates a file matcher based on a list of path patterns.

  Windmill Matcher patterns are different than patterns in other
  systems (e.g., .gitignore patterns). The patterns are non-recursive
  by default. They only match files, not directories.

  Symbols:

  - :code:`*`: Wildcard match on the base filename.
  - :code:`*/`: Matches all files in a directory, but NOT in subdirectories.
  - :code:`**/`: Matches all files in a directory and its subdirectories, recursively.
  - :code:`!`: When at the beginning of a match pattern, negates the match.

  Examples:

  - :code:`.git`: Matches a file named ".git" but NOT a file named ".git/status"
  - :code:`.git/*`: Matches a file named ".git/status" but NOT a file named ".git/a/b"
  - :code:`.git/**/a`: Matches a file named ".git/a" and ".git/subdir/a"
  - :code:`!.git/**`: Matches any file not in the ".git" directory

  Args:
    pattern (str or list of str): Patterns to match against filepaths.
      If multiple patterns are specified, interprets as "OR" the positive
      matches and "AND" the negated matches. For example,
      :code:`["a.*", "b.*", "!*.txt"]` would match "a.exe" and "b.exe"
      but not "a.txt"

  Returns:
    Matcher: A file matcher
  """
  return None

def run(dir, cmd, collect=None, preserve="", artifacts=None):
  """Runs a command on Windmill.

  Args:
    dir (Snapshot): The code snapshot to run the command in.
    cmd (str): A shell script to run.
    collect (Matcher): A matcher that specifies which files
      we should save in the ouptut after the command has run.
    preserve (str): An output file that contains this command's dependencies.
      Some Windmill commands print a list of all the files they read.
      If specified, Windmill will use this to help determine when commands
      do not need to be re-run.
    artifacts (list of str): A list of artifact directories to share
      between runs. Many toolchains keep a directory of cached output files
      that can be re-used on subsequent runs.

  Returns:
    Job: The results of the run.
  """
  return None

def plugin(dir, cmd):
  """Runs a plugin command on Windmill.

  A plugin is a special kind of run with JSON-formatted stdout.
  The JSON contains the fields:

  - deps (list of str): The files that the command needs.
  - argv (list of str): A list of arguments to run the "main" part of the plugin.
  - artifacts (list of obj): A list of artifact directory specifications.

  We think `plugin` may eventually become folded into `run`.

  Args:
    dir (Snapshot): The code snapshot to run the command in.
    cmd (str): A shell script to run to bootstrap the plugin.

  Returns:
    Job: The results of the run.
  """
  return None

def ls(snap):
  """Lists the files in a snapshot.

  Equivalent to running :code:`find . -type f`

  Args:
    snap (Snapshot): The code snapshot

  Returns:
    list of str: All the file names, recursively.
  """
  return None

def overlay(*args):
  """Overlays multiple snapshots in order.

  Args:
    *args (Snapshot): Two or more code snapshots.

  Returns:
    Snapshot:
      A new snapshot with the union of all input snapshots.
      If two snapshots contain the same file, the last snapshot's file
      is the only one that is visible.
  """
  return None

def reroot(snap, root):
  """Creates a new subdirectory and moves the snapshot into it.

  Args:
    snap (Snapshot): The code snapshot.
    root (str): A new directory to create.

  Returns:
    Snapshot: A new snapshot where all the files are under 'root'
  """
  return None

def subdir(snap, path):
  """Returns a subtree of a snapshot.

  Args:
    snap (Snapshot): The code snapshot.
    path (str): The inner directory.

  Returns:
    Snapshot:
      A new snapshot where the files under 'path'
      are at the root of the snapshot.
  """
  return None
def write_file(snap, path, contents):
  """Returns a snap with the new file

  Args:
    snap (Snapshot): The code snapshot.
    path (str): Inner path to file to create
    contents (str): Contents of file

  Returns:
    Snapshot:
      A new snapshot where the file at 'path'
      is created with the specified contents.
"""
  return None
def preserve(snap, matcher):
  """Masks files in a snapshot.

  Args:
    snap (Snapshot): The code snapshot.
    matcher (Matcher): A file matcher. Only files that pass the matcher are kept.

  Returns:
    Snapshot: A new snapshot with only the files that pass the matcher.
  """
  return None

def json_decode(json):
  """Parses JSON

  Args:
    json (str): A JSON string.

  Returns:
    any: The JSON parsed into Skylark native objects.

  Raises:
    An uncatchable job failure if the JSON is malformed.
  """
  return None

def warn(msg):
  """Adds a warning for this stage to the Windmill UI

  Args:
    msg (str): Message to be displayed with this warning

  Returns:
    None
"""
  return None
class Job:
  """The output of a command run on Windmill.

  Created as the result of 'run' or 'plugin'.
  """

  stdout = ''
  """str: The standard output of a run"""

  stderr = ''
  """str: The standard error of a run"""

  output = None
  """Snapshot: A file tree with the files saved after a run. Only present if "collect" is specified."""

  exit_code = 0
  """int: The exit code of the run"""

class JobSet:
  """Created with new_job_set"""

  def add(self, name, job):
    """Adds a job to the job set.

    Jobs in a job set can be run lazily and in parallel. This is the main
    way that Windmill parallelizes your build across multiple computers.

    Args:
      name (str): The name of the job, to distinguish it in the run output.
      job (lambda): A function that returns a Job or a JobSet.

    Returns:
      Job: A promise that will contain the results of the job after it runs.
    """
    return None

  def result(self, name):
    """Lookup a job previously added to the job set.

    Args:
      name (str): The name of the job.

    Returns:
      Job: A promise that will contain the results of the job after it runs.
    """
    return None

class Snapshot:
  """An immutable tree of files.

  All :code:`BUILD.mill` files should have a :code:`main` function that takes a
  :code:`Snapshot` as its argument. This contains all the source
  files in your project.

  You can never modify an existing snapshot. You can only create
  new snapshots.
  """
  pass

class Matcher:
  """Matches files in a snapshot based on file path.

  Created with the match_glob function. See match_glob docs for more
  info on the pattern syntax."""
  pass
